{"version":3,"sources":["backgrounds/GeometricWaveBackground/Background.module.scss","backgrounds/GeometricWaveBackground/waveUtils.tsx","backgrounds/GeometricWaveBackground/index.tsx","components/Button/index.tsx","pages/welcome/index.tsx","App.tsx","serviceWorker.ts","index.tsx","App.module.scss","components/Button/styles.module.scss"],"names":["module","exports","generateIndexedTriangles","size","segments","depth","indices","vertices","segmentSize","halfSize","i","y","j","x","push","Math","random","generateSquareGridVertices","a","b","c","d","camera","initcpos","geometry","triangles","scene","THREE","renderer","init","window","innerWidth","innerHeight","position","z","lookAt","setPixelRatio","devicePixelRatio","mesh","color","add","light","set","fog","nv","length","Waves","handleScreenResize","aspect","setSize","width","height","mx","my","cx","cy","handleMouse","e","clientX","clientY","animate","requestAnimationFrame","setAttribute","amplitude","nt","slice","t","Date","now","cosxy","cos","sqrt","wave","sin","offset","computeWaves","computeVertexNormals","cpos","clone","applyAxisAngle","render","GeometricWaveBackground","ref","useRef","useEffect","current","appendChild","domElement","addEventListener","removeEventListener","className","styles","background","Button","props","children","onClick","link","target","button","href","WelcomePage","App","app","appContainer","header","profilePic","src","content","pageWrapper","pageContainer","sideAnnex","Boolean","location","hostname","match","history","createBrowserHistory","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2ed7acc3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"background\":\"Background_background__1LRx_\"};","function generateSquareGridVertices(size: number, segments: number, depth: number) : number[] {\n    const vertices = [];\n    const segmentSize = size/segments;\n    const halfSize = size/2;\n    for (let i = 0; i <= segments; i ++ ) {\n        let y = ( i * segmentSize ) - halfSize;\n        for ( let j = 0; j <= segments; j ++ ) {\n            let x = ( j * segmentSize ) - halfSize;\n            vertices.push( x, - y, Math.random() * depth * 2 - depth);\n        }\n    }\n    return vertices;\n}\n\nexport function generateIndexedTriangles(size: number, segments: number, depth: number) : number[][] {\n    const indices = [];\n    const vertices = generateSquareGridVertices(size, segments, depth);\n\n    for (let i = 0; i < segments; i ++ ) {\n        for (let j = 0; j < segments; j++) {\n            let a = i * (segments + 1) + (j + 1);\n            let b = i * (segments + 1) + j;\n            let c = (i + 1) * (segments + 1) + j;\n            let d = (i + 1) * (segments + 1) + (j + 1);\n            indices.push(a, b, d);\n            indices.push(b, c, d);\n        }\n    }\n\n    return [indices, vertices];\n}\n\nexport function generateTriangles(size: number, segments: number, depth: number) : number[] {\n    const [indices, vertices] = generateIndexedTriangles(size, segments, depth);\n    const nv = [];\n    for(let i=0; i < indices.length; i++) {\n        nv.push(vertices[indices[i]*3], vertices[indices[i]*3+1], vertices[indices[i]*3+2]);\n    }\n    return nv;\n}\n\nexport function computeWaves(triangles: number[], amplitude: number) : number[] {\n    const nt = triangles.slice();\n    const speed = 0.7;\n    for(let i=0; i < triangles.length; i+=3) {\n        const t = Date.now();\n        const cosxy = amplitude * 2 * Math.cos((nt[i] + nt[i+1]) * Math.sqrt(speed) * 0.3 + 5);\n        const wave = Math.sin(speed*(t/1000) + cosxy - nt[i] * 0.5);\n        const offset = amplitude * 0.5 * Math.sin(t/1000 + cosxy);\n        nt[i+2] += amplitude * wave + offset;\n    }\n    return nt;\n}\n","import React, {useEffect, useRef} from 'react';\nimport styles from './Background.module.scss';\nimport * as Waves from './waveUtils';\nimport * as THREE from 'three';\nimport {computeWaves} from \"./waveUtils\";\n\nlet size: number = 60,\n    scene: THREE.Scene = new THREE.Scene(),\n    camera: THREE.PerspectiveCamera,\n    initcpos: THREE.Vector3,\n    renderer: THREE.WebGLRenderer = new THREE.WebGLRenderer(),\n    geometry: THREE.BufferGeometry,\n    triangles: number[];\n\nfunction init() {\n    camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );\n    initcpos = new THREE.Vector3(0,-size/3,10);\n    camera.position.x = initcpos.x;\n    camera.position.y = initcpos.y;\n    camera.position.z = initcpos.z;\n    camera.lookAt(0,-size/4,0);\n\n    renderer.setPixelRatio( window.devicePixelRatio );\n\n    geometry = new THREE.BufferGeometry();\n    const mesh = new THREE.Mesh( geometry, new THREE.MeshPhongMaterial({\n        color: 0x18344a\n    }));\n    scene.add( mesh );\n\n    const light = new THREE.PointLight(0xffffff, 2 );\n    light.position.set(0,size*2,50);\n    scene.add(light);\n\n    scene.add(new THREE.AmbientLight(0xffffff, 0.5));\n    scene.fog = new THREE.Fog(0x000000, 30, 0);\n\n    triangles = Waves.generateTriangles(size,100, 0.08);\n};\n\nconst handleScreenResize = ()=> {\n    camera.aspect = window.innerWidth / window.innerHeight;\n    renderer.setSize( window.innerWidth, window.innerHeight );\n};\n\nlet width = window.innerWidth,\n    height = window.innerHeight,\n    [mx, my] = [0,0],\n    [cx,cy] = [mx,my];\nconst handleMouse = (e: any) => {\n    mx = ((e.clientX || mx) - width/2)/width;\n    my = ((e.clientY || my) - height/2)/height;\n};\n\nfunction animate() {\n    requestAnimationFrame( animate );\n    geometry.setAttribute( 'position', new THREE.Float32BufferAttribute(computeWaves(triangles, 0.8), 3));\n    geometry.computeVertexNormals();\n    const cpos = initcpos.clone();\n    cpos.applyAxisAngle(new THREE.Vector3(0,1,0), cx);\n    cpos.applyAxisAngle(new THREE.Vector3(1,0,0), 0.2 * cy);\n    cx += (mx - cx)/100;\n    cy += (my - cy)/100;\n    camera.position.x = cpos.x;\n    camera.position.y = cpos.y;\n    camera.position.z = cpos.z;\n    renderer.render( scene, camera );\n}\n\nexport default function GeometricWaveBackground() : React.FunctionComponentElement<any> {\n\n    const ref = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n        init();\n        if(ref?.current) {\n            ref.current.appendChild(renderer.domElement);\n            animate();\n        }\n    }, [renderer.domElement]);\n\n    useEffect(() => {\n        window.addEventListener('resize', handleScreenResize);\n        window.addEventListener('mousemove', handleMouse);\n        handleScreenResize();\n        return () => {\n            window.removeEventListener('mousemove', handleMouse);\n            window.removeEventListener('resize',handleScreenResize);\n        }\n    }, []);\n\n    return (\n      <div className={styles.background} ref={ref}>\n      </div>\n    );\n}","import React from \"react\";\nimport styles from './styles.module.scss';\n\ntype Props = {\n    children: any,\n    onClick?: () => void,\n    link?: string,\n    target?: \"_blank\" | \"_new\"\n}\n\nexport default function Button(props: Props) : React.FunctionComponentElement<any> {\n    const {children, onClick, link, target} = props;\n\n    if(link) {\n        return (\n            <a className={styles.button} onClick={onClick} href={link} target={target}>{children}</a>\n        );\n    }\n\n    return (\n      <button className={styles.button} onClick={onClick}>{children}</button>\n    );\n}","import React from 'react';\nimport Button from '../../components/Button';\n\nexport default function WelcomePage() {\n    return (\n      <>\n          <h1>Hey there!</h1>\n          <p>Thank you for checking out my personal website! It's still under development but you can enjoy the nice animation I created for now...</p>\n          <p>What would you like to do?\n              <Button link=\"/statics/Luis_E_Tadeo_Resume_Nov_2019.pdf\" target={\"_blank\"}>View resume</Button>\n              <Button link={\"https://linkedin.com/in/letadeos\"} target={\"_blank\"}>Add on linkedin</Button>\n          </p>\n      </>\n    );\n}","import React from 'react';\nimport './global.scss';\nimport styles from './App.module.scss';\nimport Background from './backgrounds/GeometricWaveBackground';\nimport WelcomePage from \"./pages/welcome\";\n\nfunction App() {\n  return (\n    <div className={styles.app}>\n      <Background />\n      <div className={styles.appContainer}>\n          <header className={styles.header}>\n              <div className={styles.profilePic}>\n                  <img src={\"/statics/profilePic.jpg\"} />\n              </div>\n              <div className={styles.content}>\n                  <h2>Luis Tadeo</h2>\n                  <h3>Software Engineer</h3>\n              </div>\n          </header>\n          <div className={styles.pageWrapper}>\n              <div className={styles.pageContainer}>\n                  <WelcomePage/>\n              </div>\n          </div>\n          <div className={styles.sideAnnex}>\n\n          </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Router } from 'react-router';\nimport { createBrowserHistory } from \"history\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst history = createBrowserHistory();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router history={history}>\n        <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__15LM-\",\"appContainer\":\"App_appContainer__1hNk1\",\"header\":\"App_header__2L3DO\",\"content\":\"App_content__1Wt3K\",\"profilePic\":\"App_profilePic__rESdb\",\"pageWrapper\":\"App_pageWrapper__1Jej4\",\"pageContainer\":\"App_pageContainer__IMjRo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"styles_button__12U2K\"};"],"sourceRoot":""}